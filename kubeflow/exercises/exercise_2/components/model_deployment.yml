name: Deploy model
inputs:
- {name: project, type: String}
- {name: region, type: String}
- {name: model_name, type: String}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp' 'kfp==1.8.12' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef deploy_model(\n    project: str,\n    region: str,\n    model_name:str\n\
      \n):\n    from google.cloud import aiplatform\n    aiplatform.init(project=project,\
      \ location=region)\n\n    endpoint_name = model_name+\"_endpoint\"\n\n    def\
      \ create_endpoint():\n        endpoints = aiplatform.Endpoint.list(\n      \
      \  filter='model_name=\"{}\"'.format(ENDPOINT_NAME),\n        order_by='create_time\
      \ desc',\n        project=project, \n        location=region,\n        )\n \
      \       if len(endpoints) > 0:\n            endpoint = endpoints[0]  # most\
      \ recently created\n        else:\n            endpoint = aiplatform.Endpoint.create(\n\
      \            display_name=endpoint_name, project=project, location=region\n\
      \        )\n    endpoint = create_endpoint()   \n\n\n    #Import a model programmatically\n\
      \    \"\"\"\n    model_upload = aiplatform.Model.upload(\n        display_name\
      \ = model_name, \n        artifact_uri = model.uri.replace(\"model\", \"\"),\n\
      \        serving_container_image_uri =  serving_container_image_uri,\n     \
      \   serving_container_health_route=f\"/v1/models/{model_name}\",\n        serving_container_predict_route=f\"\
      /v1/models/{model_name}:predict\",\n        serving_container_environment_variables={\n\
      \        \"model_name\": model_name,\n    },       \n    )\"\"\"\n\n    model\
      \ = aiplatform.Model(model_name=model_name)\n\n    model_deploy = model.deploy(\n\
      \        machine_type=\"n1-standard-4\", \n        endpoint=endpoint,\n    \
      \    traffic_split={\"0\": 100},\n        deployed_model_display_name=model_name,\n\
      \    )\n\n    # Save data to the output params\n    vertex_model.uri = model_deploy.resource_name\n\
      \n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - deploy_model
