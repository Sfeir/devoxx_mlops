name: Deploy model
inputs:
- {name: project, type: String}
- {name: region, type: String}
- {name: model_name, type: String}
implementation:
  container:
    image: gcr.io/deeplearning-platform-release/tf2-cpu.2-8
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def deploy_model(\n    project,\n    region,\n    model_name\n\n):\n    from\
      \ google.cloud import aiplatform\n    aiplatform.init(project=project, location=region)\n\
      \n    endpoint_name = model_name+\"_endpoint\"\n\n    def create_endpoint():\n\
      \        endpoints = aiplatform.Endpoint.list(\n        filter='displayName=\"\
      {}\"'.format(endpoint_name),\n        order_by='create_time desc',\n       \
      \ project=project, \n        location=region,\n        )\n        if len(endpoints)\
      \ > 0:\n            endpoint = endpoints[0]  # most recently created\n     \
      \   else:\n            endpoint = aiplatform.Endpoint.create(\n            display_name=endpoint_name,\
      \ project=project, location=region\n        )\n    endpoint = create_endpoint()\
      \   \n\n    #Import a model programmatically\n    \"\"\"\n    model_upload =\
      \ aiplatform.Model.upload(\n        display_name = model_name, \n        artifact_uri\
      \ = model.uri.replace(\"model\", \"\"),\n        serving_container_image_uri\
      \ =  serving_container_image_uri,\n        serving_container_health_route=f\"\
      /v1/models/{model_name}\",\n        serving_container_predict_route=f\"/v1/models/{model_name}:predict\"\
      ,\n        serving_container_environment_variables={\n        \"model_name\"\
      : model_name,\n    },       \n    )\"\"\"\n\n    model = aiplatform.Model(model_name=model_name)\n\
      \n    model_deploy = model.deploy(\n        machine_type=\"n1-standard-4\",\
      \ \n        endpoint=endpoint,\n        traffic_split={\"0\": 100},\n      \
      \  deployed_model_display_name=model_name,\n    )\n\n    # Save data to the\
      \ output params\n    return model_deploy.resource_name\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='Deploy model', description='')\n_parser.add_argument(\"\
      --project\", dest=\"project\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--region\", dest=\"region\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-name\", dest=\"\
      model_name\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args\
      \ = vars(_parser.parse_args())\n\n_outputs = deploy_model(**_parsed_args)\n"
    args:
    - --project
    - {inputValue: project}
    - --region
    - {inputValue: region}
    - --model-name
    - {inputValue: model_name}
